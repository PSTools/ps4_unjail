#pragma once
#include "UserService.h"


#define ORBIS_AUDIO_OUT_ERROR_NOT_OPENED			-2144993279	/* 0x80260001 */

#define ORBIS_AUDIO_OUT_ERROR_BUSY				-2144993278	/* 0x80260002 */

#define ORBIS_AUDIO_OUT_ERROR_INVALID_PORT		-2144993277	/* 0x80260003 */

#define ORBIS_AUDIO_OUT_ERROR_INVALID_POINTER		-2144993276	/* 0x80260004 */

#define ORBIS_AUDIO_OUT_ERROR_PORT_FULL			-2144993275	/* 0x80260005 */

#define ORBIS_AUDIO_OUT_ERROR_INVALID_SIZE		-2144993274	/* 0x80260006 */

#define ORBIS_AUDIO_OUT_ERROR_INVALID_FORMAT		-2144993273	/* 0x80260007 */

#define ORBIS_AUDIO_OUT_ERROR_INVALID_SAMPLE_FREQ	-2144993272	/* 0x80260008 */


	/**
	* @j ポートタイプの値が不正 @ej
	* @e Invalid port type @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_INVALID_PORT_TYPE	-2144993270	/* 0x8026000A */

	/**
	* @j コンフィグタイプの値が不正 @ej
	* @e Invalid config type @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_INVALID_CONF_TYPE	-2144993268	/* 0x8026000C */

	/**
	* @j メモリが足りない @ej
	* @e Not enough memory @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_OUT_OF_MEMORY		-2144993267	/* 0x8026000D */

	/**
	* @j 初期化済みである @ej
	* @e already initialized @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_ALREADY_INIT		-2144993266	/* 0x8026000E */

	/**
	* @j 初期化されていない @ej
	* @e not initialized @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_NOT_INIT			-2144993265	/* 0x8026000F */

	/**
	* @j メモリ管理処理が行えない @ej
	* @e memory handling error @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_MEMORY				-2144993264	/* 0x80260010 */

	/**
	* @j システム資源が確保できない @ej
	* @e system resourc error @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_SYSTEM_RESOURCE		-2144993263	/* 0x80260011 */

	/**
	* @j オーディオシステムランタイムへのイベント送信エラー @ej
	* @e transfer event send error @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_TRANS_EVENT			-2144993262	/* 0x80260012 */

	/**
	* @j ボリュームのフラグ値が不正 @ej
	* @e Invalid volume flag value @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_INVALID_FLAG		-2144993261	/* 0x80260013 */

	/**
	* @j ミックスレベル値が不正 @ej
	* @e Invalid mix level value @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_INVALID_MIXLEVEL	-2144993260	/* 0x80260014 */

	/**
	* @j 引数が不正 @ej
	* @e Invalid argument @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_INVALID_ARG			-2144993259	/* 0x80260015 */

	/**
	* @j パラメータが不正 @ej
	* @e Invalid parameter @ee
	*/
#define ORBIS_AUDIO_OUT_ERROR_INVALID_PARAM		-2144993258	/* 0x80260016 */

#define ORBIS_AUDIO_MIN_LEN		256u		
#define ORBIS_AUDIO_MAX_LEN		(256u*8)

typedef enum OrbisAudioOutChannel {
		ORBIS_AUDIO_OUT_CHANNEL_L = 0,
		ORBIS_AUDIO_OUT_CHANNEL_R,	/* 1 */
		ORBIS_AUDIO_OUT_CHANNEL_C,	/* 2 */
		ORBIS_AUDIO_OUT_CHANNEL_LFE,	/* 3 */
		ORBIS_AUDIO_OUT_CHANNEL_LS,	/* 4 */
		ORBIS_AUDIO_OUT_CHANNEL_RS,	/* 5 */
		ORBIS_AUDIO_OUT_CHANNEL_LE,	/* 6 */
		ORBIS_AUDIO_OUT_CHANNEL_RE,	/* 7 */
		ORBIS_AUDIO_OUT_CHANNEL_MAX	/* 8 */
} OrbisAudioOutChannel;

typedef enum OrbisAudioOutChannelOrderStd {
	ORBIS_AUDIO_OUT_CHANNEL_STD_L = 0,
	ORBIS_AUDIO_OUT_CHANNEL_STD_R,	/* 1 */
	ORBIS_AUDIO_OUT_CHANNEL_STD_C,	/* 2 */
	ORBIS_AUDIO_OUT_CHANNEL_STD_LFE,	/* 3 */
	ORBIS_AUDIO_OUT_CHANNEL_STD_LE,	/* 4 */
	ORBIS_AUDIO_OUT_CHANNEL_STD_RE,	/* 5 */
	ORBIS_AUDIO_OUT_CHANNEL_STD_LS,	/* 6 */
	ORBIS_AUDIO_OUT_CHANNEL_STD_RS,	/* 7 */
	ORBIS_AUDIO_OUT_CHANNEL_STD_MAX	/* 8 */
} OrbisAudioOutChannelOrderStd;

#define ORBIS_AUDIO_OUT_CHANNEL_FL	ORBIS_AUDIO_OUT_CHANNEL_L
#define ORBIS_AUDIO_OUT_CHANNEL_FR	ORBIS_AUDIO_OUT_CHANNEL_R
#define ORBIS_AUDIO_OUT_CHANNEL_FC	ORBIS_AUDIO_OUT_CHANNEL_C
#define ORBIS_AUDIO_OUT_CHANNEL_CNT	ORBIS_AUDIO_OUT_CHANNEL_C
#define ORBIS_AUDIO_OUT_CHANNEL_RL	ORBIS_AUDIO_OUT_CHANNEL_LS
#define ORBIS_AUDIO_OUT_CHANNEL_RR	ORBIS_AUDIO_OUT_CHANNEL_RS
#define ORBIS_AUDIO_OUT_CHANNEL_BL	ORBIS_AUDIO_OUT_CHANNEL_LE
#define ORBIS_AUDIO_OUT_CHANNEL_BR	ORBIS_AUDIO_OUT_CHANNEL_RE

#define ORBIS_AUDIO_OUT_CHANNEL_STD_FL	ORBIS_AUDIO_OUT_CHANNEL_STD_L
#define ORBIS_AUDIO_OUT_CHANNEL_STD_FR	ORBIS_AUDIO_OUT_CHANNEL_STD_R
#define ORBIS_AUDIO_OUT_CHANNEL_STD_FC	ORBIS_AUDIO_OUT_CHANNEL_STD_C
#define ORBIS_AUDIO_OUT_CHANNEL_STD_CNT	ORBIS_AUDIO_OUT_CHANNEL_STD_C
#define ORBIS_AUDIO_OUT_CHANNEL_STD_BL	ORBIS_AUDIO_OUT_CHANNEL_STD_LE
#define ORBIS_AUDIO_OUT_CHANNEL_STD_BR	ORBIS_AUDIO_OUT_CHANNEL_STD_RE
#define ORBIS_AUDIO_OUT_CHANNEL_STD_RL	ORBIS_AUDIO_OUT_CHANNEL_STD_LS
#define ORBIS_AUDIO_OUT_CHANNEL_STD_RR	ORBIS_AUDIO_OUT_CHANNEL_STD_RS




/* argument 'portType' value for sceAudioOutOpen() */
#define ORBIS_AUDIO_OUT_PORT_TYPE_MAIN		(0)
#define ORBIS_AUDIO_OUT_PORT_TYPE_BGM			(1)
#define ORBIS_AUDIO_OUT_PORT_TYPE_VOICE		(2)
#define ORBIS_AUDIO_OUT_PORT_TYPE_PERSONAL	(3)
#define ORBIS_AUDIO_OUT_PORT_TYPE_PADSPK  	(4)
#define ORBIS_AUDIO_OUT_PORT_TYPE_AUX			(127)

// sceAudioOutOpen()の引数 paramのformatの値とマスク値
#define ORBIS_AUDIO_OUT_PARAM_FORMAT_S16_MONO			(0)
#define ORBIS_AUDIO_OUT_PARAM_FORMAT_S16_STEREO		(1)
#define ORBIS_AUDIO_OUT_PARAM_FORMAT_S16_8CH			(2)
#define ORBIS_AUDIO_OUT_PARAM_FORMAT_FLOAT_MONO		(3)
#define ORBIS_AUDIO_OUT_PARAM_FORMAT_FLOAT_STEREO		(4)
#define ORBIS_AUDIO_OUT_PARAM_FORMAT_FLOAT_8CH		(5)

#define ORBIS_AUDIO_OUT_PARAM_FORMAT_S16_8CH_STD		(6)
#define ORBIS_AUDIO_OUT_PARAM_FORMAT_FLOAT_8CH_STD	(7)

#define ORBIS_AUDIO_OUT_PARAM_FORMAT_MASK			(0x000000FF)
#define ORBIS_AUDIO_OUT_PARAM_FORMAT_SHIFT		(0)

// sceAudioOutOpen()の引数 paramのattributeの値とマスク値
#define ORBIS_AUDIO_OUT_PARAM_ATTR_RESTRICTED			(0x00010000)
#define ORBIS_AUDIO_OUT_PARAM_ATTR_MIX_TO_MAIN		(0x00020000)

#define ORBIS_AUDIO_OUT_PARAM_ATTR_MASK				(0x000F0000)
#define ORBIS_AUDIO_OUT_PARAM_ATTR_SHIFT				(16)


typedef struct OrbisAudioOutOutputParam
{
	/*J ポートハンドル */
	/*E handle : port handle */
	int32_t handle;

	/*J 出力PCM */
	/*E output PCM */
	const void *ptr;

} OrbisAudioOutOutputParam;



#define ORBIS_AUDIO_OUT_OUTPUTS_MAX ORBIS_AUDIO_OUT_CHANNEL_MAX



/*J 引数 'vol[]' に設定する値の最大値 */
/*E Max. value set for the argument 'vol[]' */
#define ORBIS_AUDIO_VOLUME_SHIFT				15
#define ORBIS_AUDIO_OUT_VOLUME_SHIFT			ORBIS_AUDIO_VOLUME_SHIFT
#define ORBIS_AUDIO_VOLUME_0DB				(1<<ORBIS_AUDIO_VOLUME_SHIFT)
#define ORBIS_AUDIO_VOLUME_0dB				ORBIS_AUDIO_VOLUME_0DB
#define ORBIS_AUDIO_OUT_VOLUME_0DB			ORBIS_AUDIO_VOLUME_0DB
#define ORBIS_AUDIO_OUT_VOLUME_0dB			ORBIS_AUDIO_VOLUME_0dB

/*J 引数 'flag' に設定する値 */
/*E Value set for the argument 'flag' */
#define ORBIS_AUDIO_VOLUME_FLAG_L_CH			(1<<0)
#define ORBIS_AUDIO_VOLUME_FLAG_FL_CH			ORBIS_AUDIO_VOLUME_FLAG_L_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_L_CH		ORBIS_AUDIO_VOLUME_FLAG_L_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_FL_CH		ORBIS_AUDIO_VOLUME_FLAG_L_CH

#define ORBIS_AUDIO_VOLUME_FLAG_R_CH			(1<<1)
#define ORBIS_AUDIO_VOLUME_FLAG_FR_CH			ORBIS_AUDIO_VOLUME_FLAG_R_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_R_CH		ORBIS_AUDIO_VOLUME_FLAG_R_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_FR_CH		ORBIS_AUDIO_VOLUME_FLAG_R_CH

#define ORBIS_AUDIO_VOLUME_FLAG_C_CH			(1<<2)
#define ORBIS_AUDIO_VOLUME_FLAG_FC_CH			ORBIS_AUDIO_VOLUME_FLAG_C_CH
#define ORBIS_AUDIO_VOLUME_FLAG_CNT_CH		ORBIS_AUDIO_VOLUME_FLAG_C_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_C_CH		ORBIS_AUDIO_VOLUME_FLAG_C_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_FC_CH		ORBIS_AUDIO_VOLUME_FLAG_C_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_CNT_CH	ORBIS_AUDIO_VOLUME_FLAG_C_CH

#define ORBIS_AUDIO_VOLUME_FLAG_LFE_CH		(1<<3)
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_LFE_CH	ORBIS_AUDIO_VOLUME_FLAG_LFE_CH

#define ORBIS_AUDIO_VOLUME_FLAG_LS_CH			(1<<4)
#define ORBIS_AUDIO_VOLUME_FLAG_RL_CH			ORBIS_AUDIO_VOLUME_FLAG_LS_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_LS_CH		ORBIS_AUDIO_VOLUME_FLAG_LS_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_RL_CH		ORBIS_AUDIO_VOLUME_FLAG_LS_CH

#define ORBIS_AUDIO_VOLUME_FLAG_RS_CH			(1<<5)
#define ORBIS_AUDIO_VOLUME_FLAG_RR_CH			ORBIS_AUDIO_VOLUME_FLAG_RS_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_RS_CH		ORBIS_AUDIO_VOLUME_FLAG_RS_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_RR_CH		ORBIS_AUDIO_VOLUME_FLAG_RS_CH

#define ORBIS_AUDIO_VOLUME_FLAG_LE_CH			(1<<6)
#define ORBIS_AUDIO_VOLUME_FLAG_BL_CH			ORBIS_AUDIO_VOLUME_FLAG_LE_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_LE_CH		ORBIS_AUDIO_VOLUME_FLAG_LE_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_BL_CH		ORBIS_AUDIO_VOLUME_FLAG_LE_CH

#define ORBIS_AUDIO_VOLUME_FLAG_RE_CH			(1<<7)
#define ORBIS_AUDIO_VOLUME_FLAG_BR_CH			ORBIS_AUDIO_VOLUME_FLAG_RE_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_RE_CH		ORBIS_AUDIO_VOLUME_FLAG_RE_CH
#define ORBIS_AUDIO_OUT_VOLUME_FLAG_BR_CH		ORBIS_AUDIO_VOLUME_FLAG_RE_CH




#define ORBIS_AUDIO_MIXLEVEL_PADSPK_SHIFT				15
#define ORBIS_AUDIO_OUT_MIXLEVEL_PADSPK_SHIFT			ORBIS_AUDIO_MIXLEVEL_PADSPK_SHIFT
#define ORBIS_AUDIO_MIXLEVEL_PADSPK_0DB				(1<<ORBIS_AUDIO_MIXLEVEL_PADSPK_SHIFT)
#define ORBIS_AUDIO_MIXLEVEL_PADSPK_0dB				ORBIS_AUDIO_MIXLEVEL_PADSPK_0DB
#define ORBIS_AUDIO_OUT_MIXLEVEL_PADSPK_0DB			ORBIS_AUDIO_MIXLEVEL_PADSPK_0DB
#define ORBIS_AUDIO_OUT_MIXLEVEL_PADSPK_0dB			ORBIS_AUDIO_MIXLEVEL_PADSPK_0dB

/*J 引数 'mixLevel' に設定する値の初期値 -9dB */
/*E Defult value set for the argument 'mixLevel' -9dB */
#define ORBIS_AUDIO_OUT_MIXLEVEL_PADSPK_DEFAULT		(11626)	


typedef enum {
    ORBIS_AUDIO_OUT_STATE_OUTPUT_UNKNOWN                =  0,
    ORBIS_AUDIO_OUT_STATE_OUTPUT_CONNECTED_PRIMARY      = (1 <<  0), // primary output
    ORBIS_AUDIO_OUT_STATE_OUTPUT_CONNECTED_SECONDARY    = (1 <<  1), // secondary output
    ORBIS_AUDIO_OUT_STATE_OUTPUT_CONNECTED_TERTIARY     = (1 <<  2), // controller speaker
    ORBIS_AUDIO_OUT_STATE_OUTPUT_CONNECTED_HEADPHONE    = (1 <<  6), // USB/bluetooth headphone
    ORBIS_AUDIO_OUT_STATE_OUTPUT_CONNECTED_EXTERNAL     = (1 <<  7), // recording, remoteplay, spectating, etc.
} OrbisAudioOutStateOutput;

/*J チャンネルステータス*/
/*E channel state*/
typedef enum {
    ORBIS_AUDIO_OUT_STATE_CHANNEL_UNKNOWN      = 0, // error
    ORBIS_AUDIO_OUT_STATE_CHANNEL_DISCONNECTED = 0, // disconnected
    ORBIS_AUDIO_OUT_STATE_CHANNEL_1            = 1, // 1.0ch
	ORBIS_AUDIO_OUT_STATE_CHANNEL_2            = 2, // 2.0ch
    ORBIS_AUDIO_OUT_STATE_CHANNEL_6            = 6, // 5.1ch
    ORBIS_AUDIO_OUT_STATE_CHANNEL_8            = 8, // 7.1ch
} OrbisAudioOutStateChannel;

typedef enum {
    ORBIS_AUDIO_OUT_STATE_FLAG_NONE = 0,	    // reserved for future expansion
} OrbisAudioOutStateFlag;

typedef struct {
    uint16_t output;		// SceAudioOutStateOutput (bitwise OR)
    uint8_t  channel;		// SceAudioOutStateChannel
    uint8_t  reserved8_1[1];// reserved
	int16_t  volume;			
	uint16_t rerouteCounter;
    uint64_t flag;			// SceAudioOutStateFlag (bitwise OR)
    uint64_t reserved64[2];	// reserved
} OrbisAudioOutPortState;



#define ORBIS_AUDIO_OUT_STATE_LOUDNESS_MIN	(-70.0f)

typedef struct {
	float    loudness;
	uint8_t  reserved8[4];
	uint64_t reserved64[3];
} OrbisAudioOutSystemState;


typedef enum {
	ORBIS_AUDIO_OUT_DEBUG_STATE_NULL					= 0,
	ORBIS_AUDIO_OUT_DEBUG_STATE_LOUDNESS,
	ORBIS_AUDIO_OUT_DEBUG_STATE_MAX
} OrbisAudioOutSystemDebugStateElement;

/*J ラウドネス測定 */
/*E loudness measurement */
typedef enum {
	ORBIS_AUDIO_OUT_DEBUG_STATE_LOUDNESS_STOP			= 0,
	ORBIS_AUDIO_OUT_DEBUG_STATE_LOUDNESS_START,
	ORBIS_AUDIO_OUT_DEBUG_STATE_LOUDNESS_START_QUIET,
	ORBIS_AUDIO_OUT_DEBUG_STATE_LOUDNESS_MAX
} OrbisAudioOutSystemDebugStateLoudness;

typedef struct OrbisAudioOutSystemDebugStateParam {
	uint32_t value;
	uint32_t reserved[3];// reserved
} OrbisAudioOutSystemDebugStateParam;

void StartAudioInit(void);

int PlaySound();

int PlaySound(char * Path);
